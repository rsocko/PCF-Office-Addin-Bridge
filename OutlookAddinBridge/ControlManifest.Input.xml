<?xml version="1.0" encoding="utf-8" ?>
<manifest>
  <control namespace="rysock" constructor="OutlookAddinBridge" version="0.2.231030200" display-name-key="OutlookAddinBridge" description-key="OutlookAddinBridge description" control-type="standard" >
    <external-service-usage enabled="false">
    </external-service-usage>
    <!-- property node identifies a specific, configurable piece of data that the control expects from CDS -->
    <property name="showOutputs" display-name-key="Show Outputs" description-key="Indicates if the Output properties should be rendered in the html (useful for debugging)" of-type="TwoOptions" usage="input" required="true" />

    <property name="mailItemId" display-name-key="Mail ItemId" description-key="ItemId of the Message" of-type="SingleLine.Text" usage="output" required="true" />
    <property name="subject" display-name-key="Subject" description-key="Message Subject" of-type="SingleLine.Text" usage="output" required="true" />
    <property name="normalizedSubject" display-name-key="Normalized Subject" description-key="Normalized Subject (eg without RE: FWD:) for the Message" of-type="SingleLine.Text" usage="output" required="true" />
    <property name="body" display-name-key="Body" description-key="Message Body" of-type="Multiple" usage="output" required="true" />
    <property name="uniqueBody" display-name-key="UniqueBody" description-key="Unique message body (latest message only)" of-type="Multiple" usage="output" required="true" />
    
    <property name="from" display-name-key="From" description-key="From" of-type="Object" usage="output" required="true" />
    <!-- A hidden property used by Canvas to get the output object schema for the FROM property -->
    <property name="fromSchema" display-name-key="fromSchema" description-key="fromSchema" of-type="SingleLine.Text" usage="input" hidden="true"/>

    <property name="sender" display-name-key="Sender" description-key="Sender" of-type="Object" usage="output" required="true" />
    <!-- A hidden property used by Canvas to get the output object schema for the FROM property -->
    <property name="senderSchema" display-name-key="senderSchema" description-key="senderSchema" of-type="SingleLine.Text" usage="input" hidden="true"/>

    <property name="to" display-name-key="To" description-key="To" of-type="Object" usage="output" required="true" />
    <!-- A hidden property used by Canvas to get the output object schema for the FROM property -->
    <property name="toSchema" display-name-key="toSchema" description-key="toSchema" of-type="SingleLine.Text" usage="input" hidden="true"/>

    <property name="cc" display-name-key="CC" description-key="CC" of-type="Object" usage="output" required="true" />
    <!-- A hidden property used by Canvas to get the output object schema for the FROM property -->
    <property name="ccSchema" display-name-key="ccSchema" description-key="ccSchema" of-type="SingleLine.Text" usage="input" hidden="true"/>

    <property name="attachments" display-name-key="Attachments" description-key="Attachments" of-type="Object" usage="output" required="true" />
    <!-- A hidden property used by Canvas to get the output object schema for the FROM property -->
    <property name="attachmentsSchema" display-name-key="attachmentsSchema" description-key="attachmentsSchema" of-type="SingleLine.Text" usage="input" hidden="true"/>

    <property name="hasAttachments" display-name-key="Has Attachments" description-key="Has Attachments" of-type="TwoOptions" usage="output" required="true" />
    <property name="attachmentCount" display-name-key="Attachment Count" description-key="Attachment Count" of-type="Whole.None" usage="output" required="true" />
    <property name="dateTimeCreated" display-name-key="date_and_Time_Created" description-key="Date and Time Created" of-type="DateAndTime.DateAndTime" usage="output" required="false" />

    <property-dependencies>
      <!-- Define the dependency between schema and the object type property -->
      <property-dependency input="fromSchema" output="from" required-for="schema" />
      <property-dependency input="senderSchema" output="sender" required-for="schema" />
      <property-dependency input="toSchema" output="to" required-for="schema" />
      <property-dependency input="ccSchema" output="cc" required-for="schema" />
      <property-dependency input="attachmentsSchema" output="attachments" required-for="schema" />
    </property-dependencies>

<!--
			ยง CC : emailAddressDetails[] ///array of emailDetails
			ยง attachments : attachmentDetails[] //array of attachmentDetails
    itemType : enum (appointment | message)

		from : emailAddressDetails
		sender : emailAddressDetails,
		to : emailAddressDetails[], //array of emailDetails
		cc : emailAddressDetails[] ///array of emailDetails
		attachments : attachmentDetails[] //array of attachmentDetails
    itemType : enum (appointment | message)
-->    

    <!--
      Property node's of-type attribute can be of-type-group attribute.
      Example:
      <type-group name="numbers">
        <type>Whole.None</type>
        <type>Currency</type>
        <type>FP</type>
        <type>Decimal</type>
      </type-group>
      <property name="sampleProperty" display-name-key="Property_Display_Key" description-key="Property_Desc_Key" of-type-group="numbers" usage="bound" required="true" />
    -->
    <resources>
      <code path="index.ts" order="1"/>
      <!-- UNCOMMENT TO ADD MORE RESOURCES
      <css path="css/OutlookAddinBridge.css" order="1" />
      <resx path="strings/OutlookAddinBridge.1033.resx" version="1.0.0" />
      -->
    </resources>
  </control>
</manifest>
